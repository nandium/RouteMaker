app: yolo-bouldering

service: yolo-bouldering-user

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: ap-southeast-1
  memorySize: 1024
  environment:
    NODE_ENV: ${self:custom.stage}
    ALLOWED_ORIGIN: ${self:custom._origin.${self:custom.stage}}
    COGNITO_CLIENT_ID: ${self:custom.cognitoClientId}
    COGNITO_USERPOOL_ID: ${self:custom.cognitoUserpoolId}
    TELEGRAM_SNS_ARN: ${self:custom.telegramSNSArn}
    DELETE_USER_SNS_ARN: ${self:custom.deleteUserSNSArn}
  logRetentionInDays: 14
  lambdaHashingVersion: 20201221
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - cognito-idp:SignUp
            - cognito-idp:ConfirmSignUp
            - cognito-idp:InitiateAuth
            - cognito-idp:AdminGetUser
            - cognito-idp:AdminUpdateUserAttributes
            - cognito-idp:AdminDisableUser
          Resource: ${self:custom.cognitoArn}
        - Effect: Allow
          Action:
            - sns:publish
          Resource:
            - '${self:custom.telegramSNSArn}'
            - ${self:custom.deleteUserSNSArn}

plugins:
  - serverless-plugin-typescript
  - serverless-api-gateway-throttling
  - serverless-newrelic-lambda-layers

functions:
  signup:
    handler: src/signup.handler
    events:
      - http:
          path: v1/user/signup
          method: post
          cors:
            origin: ${self:custom._origin.${self:custom.stage}}

  confirmSignup:
    handler: src/confirmSignup.handler
    events:
      - http:
          path: v1/user/confirm
          method: post
          cors:
            origin: ${self:custom._origin.${self:custom.stage}}

  resendCode:
    handler: src/resendCode.handler
    events:
      - http:
          path: v1/user/resendCode
          method: post
          cors:
            origin: ${self:custom._origin.${self:custom.stage}}

  login:
    handler: src/login.handler
    events:
      - http:
          path: v1/user/login
          method: post
          cors:
            origin: ${self:custom._origin.${self:custom.stage}}

  refreshToken:
    handler: src/refreshToken.handler
    events:
      - http:
          path: v1/user/refreshToken
          method: post
          cors:
            origin: ${self:custom._origin.${self:custom.stage}}

  forgotPassword:
    handler: src/forgotPassword.handler
    events:
      - http:
          path: v1/user/forgotPassword
          method: post
          cors:
            origin: ${self:custom._origin.${self:custom.stage}}

  confirmForgotPassword:
    handler: src/confirmForgotPassword.handler
    events:
      - http:
          path: v1/user/resetPassword
          method: post
          cors:
            origin: ${self:custom._origin.${self:custom.stage}}

  logout:
    handler: src/logout.handler
    events:
      - http:
          path: v1/user/logout
          method: post
          cors:
            origin: ${self:custom._origin.${self:custom.stage}}
          authorizer:
            arn: ${self:custom.cognitoArn}
            scopes:
              - aws.cognito.signin.user.admin

  deleteUser:
    handler: src/deleteUser.handler
    events:
      - http:
          path: v1/user/delete
          method: delete
          cors:
            origin: ${self:custom._origin.${self:custom.stage}}
          authorizer:
            arn: ${self:custom.cognitoArn}
            scopes:
              - aws.cognito.signin.user.admin

  disableUser:
    handler: src/disableUser.handler
    events:
      - http:
          path: v1/user/disable
          method: post
          cors:
            origin: ${self:custom._origin.${self:custom.stage}}
          authorizer:
            arn: ${self:custom.cognitoArn}
            scopes:
              - aws.cognito.signin.user.admin

  reportUser:
    handler: src/reportUser.handler
    events:
      - http:
          path: v1/user/report
          method: post
          cors:
            origin: ${self:custom._origin.${self:custom.stage}}
          authorizer:
            arn: ${self:custom.cognitoArn}
            scopes:
              - aws.cognito.signin.user.admin

  enableAdmin:
    handler: src/enableAdmin.handler

custom:
  stage: ${opt:stage, self:provider.stage}
  cognitoArn: ${ssm:/${self:custom.stage}/cognito/arn}
  cognitoClientId: ${ssm:/${self:custom.stage}/cognito/clientId}
  cognitoUserpoolId: ${ssm:/${self:custom.stage}/cognito/poolId}
  telegramSNSArn: ${ssm:/${self:custom.stage}/sns/telegram/arn}
  deleteUserSNSArn: ${ssm:/${self:custom.stage}/sns/deleteUser/arn}
  apiGatewayThrottling:
    maxRequestsPerSecond: ${self:custom._maxRequestsPerSecond.${self:custom.stage}}
    maxConcurrentRequests: ${self:custom._maxConcurrentRequests.${self:custom.stage}}

  newRelic:
    accountId: ${file(./serverless-config.${self:custom.stage}.json):NEW_RELIC_ACCOUNT_ID, ''}
    apiKey: ${file(./serverless-config.${self:custom.stage}.json):NEW_RELIC_API_KEY, ''}
    enableExtension: true
    enableIntegration: true
    logEnabled: true
    enableFunctionLogs: true
    cloudWatchFilter: '*'

  _maxRequestsPerSecond:
    dev: 1
    prod: 3
  _maxConcurrentRequests:
    dev: 1
    prod: 3
  _origin:
    dev: '*'
    prod: '*'
